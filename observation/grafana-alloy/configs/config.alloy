logging {
  level  = "info"
  format = "logfmt"
}

livedebugging {
  enabled = true
}

otelcol.receiver.otlp "otlp" {
  grpc {
    endpoint = "0.0.0.0:4317"
  }

  http {
    endpoint = "0.0.0.0:4318"
  }

  output {
    metrics = [otelcol.processor.tail_sampling.default.input]
    logs    = [otelcol.processor.tail_sampling.default.input]
    traces  = [otelcol.processor.tail_sampling.default.input]
  }
}

otelcol.processor.tail_sampling "default" {
  // Sample error traces
  policy {
    name = "status_code"
    type = "status_code"

    status_code {
      status_codes = ["ERROR"]
    }
  }

  // Sample long running traces
  policy {
    name = "latency"
    type = "latency"

    latency {
      threshold_ms = 3000 // 3s
    }
  }

  // Sample complex traces
  policy {
    name = "span_count"
    type = "span_count"

    span_count {
      min_spans = 20
    }
  }

  // Limits the number of sampled spans per second to prevent overload in high-traffic environments.
  policy {
    name = "rate_limit"
    type = "rate_limiting"

    rate_limiting {
      spans_per_second = 1000
    }
  }

  policy {
    name = "probabilistic"
    type = "probabilistic"

    probabilistic {
      sampling_percentage = 10
    }
  }

  output {
    metrics = [otelcol.processor.batch.default.input]
    logs    = [otelcol.processor.batch.default.input]
    traces  = [otelcol.processor.batch.default.input]
  }
}

otelcol.processor.batch "default" {
  output {
    logs    = [otelcol.exporter.otlphttp.loki.input]
    metrics = [otelcol.exporter.otlphttp.mimir.input]
    traces  = [otelcol.exporter.otlp.tempo.input]
  }
}

otelcol.exporter.otlphttp "loki" {
  client {
    endpoint = "http://loki:3100/otlp"
  }
}

otelcol.exporter.otlphttp "mimir" {
  client {
    endpoint = "http://mimir:9009/otlp"
  }
}

otelcol.exporter.otlp "tempo" {
  client {
    endpoint = "tempo:4317"

    tls {
      insecure             = true
      insecure_skip_verify = true
    }
  }
}


discovery.docker "linux" {
  host = "unix:///var/run/docker.sock"
}

loki.source.docker "default" {
  host       = "unix:///var/run/docker.sock"
  targets    = discovery.docker.linux.targets
  forward_to = [loki.write.demo.receiver]
}

loki.write "demo" {
  endpoint {
    url       = "http://loki:3100/loki/api/v1/push"
  }

  external_labels = {
    cluster = "demo",
  }
}
